/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mosesserver;

import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
//import javax.comm.CommPortIdentifier;
//import javax.comm.SerialPort;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.*;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import static java.nio.charset.StandardCharsets.ISO_8859_1;
import static java.nio.charset.StandardCharsets.US_ASCII;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.JButton;

/**
 *
 * @author Matthew Handley, modified by Nicholas Bonham
 */
public class MosesServerForm extends javax.swing.JFrame {

    byte[] udpAddress = new byte[4];
    byte[] ip = new byte[4];
    protected DatagramSocket UDPsocket = null;
    String UDPipString;
    static final String StartDelimiter = "%%%%%%%%%%",
            StopDelimiter = "^";

    SerialConnection mainSerialUp = null;
    SerialConnection mainSerialDown = null;
    ServerSocket mainSocket = null;
    ArrayList<Socket> clientSockets = new ArrayList<Socket>();
    Boolean listenSerial = false,
            listenTCP = false;
    Thread listenThreadSerial = null,
            listenThreadTCP = null,
            clientListenerTCP = null;
    ArrayList<Thread> TCPClientListernerThreads = new ArrayList<Thread>();

    DataLogger logger;

    /* Start and Stop Delimiters are now strings, so they need to be converted to char arrays
     */
    public static final char[] charstart = StartDelimiter.toCharArray();
    public static final char[] charstop = StopDelimiter.toCharArray();

    /**
     * Creates new form MosesServerFrom
     */
    public MosesServerForm() {
        initComponents();

        logger = new DataLogger("/home/moses/exitDesktop/EGSE_logs");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comboBoxComUpPort = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        comboBoxUpBaud = new javax.swing.JComboBox();
        buttonComUpDisconnect = new javax.swing.JButton();
        buttonComUpConnect = new javax.swing.JButton();
        comboBoxComUpDataBits = new javax.swing.JComboBox();
        comboBoxComUpStopBits = new javax.swing.JComboBox();
        comboBoxComUpParity = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        buttonTCPDisconnect = new javax.swing.JButton();
        buttonTCPConnect = new javax.swing.JButton();
        fieldPort = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fieldClient = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        fieldIP = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaRecieved = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textAreaSent = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        comboBoxComDownPort = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        comboBoxDownBaud = new javax.swing.JComboBox();
        buttonComDownDisconnect = new javax.swing.JButton();
        buttonComDownConnect = new javax.swing.JButton();
        comboBoxComDownDataBits = new javax.swing.JComboBox();
        comboBoxComDownStopBits = new javax.swing.JComboBox();
        comboBoxComDownParity = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        buttonUDPconnect = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        UDPPort = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        UDPip = new javax.swing.JTextField();
        buttonUDPdisconnect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Moses Server");
        setMinimumSize(new java.awt.Dimension(618, 381));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Uplink Com Port"));

        jLabel1.setText("Com Port: ");

        comboBoxComUpPort.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateUpPorts(evt);
            }
        });
        comboBoxComUpPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxComUpPortActionPerformed(evt);
            }
        });

        jLabel2.setText("Baud:");

        comboBoxUpBaud.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1200", "2400", "9600", "19200", "38400", "57600", "115200" }));

        buttonComUpDisconnect.setText("Disconnect");
        buttonComUpDisconnect.setEnabled(false);
        buttonComUpDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonComUpDisconnectActionPerformed(evt);
            }
        });

        buttonComUpConnect.setText("Connect");
        buttonComUpConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonComUpConnectActionPerformed(evt);
            }
        });

        comboBoxComUpDataBits.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Data Bits: 5", "Data Bits: 6", "Data Bits: 7", "Data Bits: 8" }));
        comboBoxComUpDataBits.setSelectedIndex(3);

        comboBoxComUpStopBits.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Stop Bits: 1", "Stop Bits: 1.5", "Stop Bits: 2" }));
        comboBoxComUpStopBits.setSelectedIndex(2);

        comboBoxComUpParity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Parity: None", "Parity: Odd", "Parity: Even", "Parity: Mark", "Parity: Space" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxUpBaud, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboBoxComUpStopBits, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonComUpDisconnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonComUpConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboBoxComUpParity, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxComUpPort, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboBoxComUpDataBits, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 75, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxComUpPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(comboBoxComUpDataBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxUpBaud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(comboBoxComUpStopBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonComUpConnect)
                    .addComponent(buttonComUpDisconnect)
                    .addComponent(comboBoxComUpParity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("TCP IP Server"));

        jLabel4.setText("Port:");

        buttonTCPDisconnect.setText("Stop");
        buttonTCPDisconnect.setEnabled(false);
        buttonTCPDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTCPDisconnectActionPerformed(evt);
            }
        });

        buttonTCPConnect.setText("Start");
        buttonTCPConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTCPConnectActionPerformed(evt);
            }
        });

        fieldPort.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fieldPort.setText("10000");
        fieldPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldPortActionPerformed(evt);
            }
        });

        jLabel3.setText("Clients Connected:");

        fieldClient.setEditable(false);
        fieldClient.setText("0");
        fieldClient.setToolTipText("");

        jLabel5.setText("IP:");

        fieldIP.setText("127.0.0.1");
        fieldIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldIPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6)
                        .addComponent(fieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonTCPDisconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonTCPConnect))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldIP, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldClient)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(buttonTCPDisconnect)
                    .addComponent(buttonTCPConnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(fieldIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fieldClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Packets Recieved (Downlink)"));

        textAreaRecieved.setEditable(false);
        textAreaRecieved.setColumns(20);
        textAreaRecieved.setRows(5);
        jScrollPane2.setViewportView(textAreaRecieved);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Packets Sent (Uplink)"));

        textAreaSent.setEditable(false);
        textAreaSent.setColumns(20);
        textAreaSent.setRows(5);
        jScrollPane3.setViewportView(textAreaSent);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Downlink Com Port"));

        jLabel6.setText("Com Port: ");

        comboBoxComDownPort.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateDownPort(evt);
            }
        });
        comboBoxComDownPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxComDownPortActionPerformed(evt);
            }
        });

        jLabel7.setText("Baud:");

        comboBoxDownBaud.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1200", "2400", "9600", "19200", "38400", "57600", "115200" }));
        comboBoxDownBaud.setSelectedIndex(2);

        buttonComDownDisconnect.setText("Disconnect");
        buttonComDownDisconnect.setEnabled(false);
        buttonComDownDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonComDownDisconnectActionPerformed(evt);
            }
        });

        buttonComDownConnect.setText("Connect");
        buttonComDownConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonComDownConnectActionPerformed(evt);
            }
        });

        comboBoxComDownDataBits.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Data Bits: 5", "Data Bits: 6", "Data Bits: 7", "Data Bits: 8" }));
        comboBoxComDownDataBits.setSelectedIndex(3);

        comboBoxComDownStopBits.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Stop Bits: 1", "Stop Bits: 1.5", "Stop Bits: 2" }));
        comboBoxComDownStopBits.setSelectedIndex(2);

        comboBoxComDownParity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Parity: None", "Parity: Odd", "Parity: Even", "Parity: Mark", "Parity: Space" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxDownBaud, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboBoxComDownStopBits, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(buttonComDownDisconnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonComDownConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboBoxComDownParity, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxComDownPort, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboBoxComDownDataBits, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxComDownPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(comboBoxComDownDataBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxDownBaud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(comboBoxComDownStopBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonComDownConnect)
                    .addComponent(buttonComDownDisconnect)
                    .addComponent(comboBoxComDownParity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("UDP Server"));

        buttonUDPconnect.setText("Connect");
        buttonUDPconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUDPconnectActionPerformed(evt);
            }
        });

        jLabel8.setText("Port:");

        jLabel9.setText("IP:");

        UDPip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UDPipActionPerformed(evt);
            }
        });

        buttonUDPdisconnect.setText("Disconnect");
        buttonUDPdisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUDPdisconnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(UDPPort)
                                .addGap(92, 92, 92))
                            .addComponent(UDPip)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonUDPdisconnect)
                        .addGap(18, 18, 18)
                        .addComponent(buttonUDPconnect)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(UDPPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UDPip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonUDPconnect)
                    .addComponent(buttonUDPdisconnect))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void updateUpPorts(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateUpPorts
        if (comboBoxComUpPort.isEnabled()) {
            Object selectedPort = comboBoxComUpPort.getSelectedItem();
            comboBoxComUpPort.removeAllItems();

            Enumeration portEnum = CommPortIdentifier.getPortIdentifiers();

            while (portEnum.hasMoreElements()) {
                CommPortIdentifier currPortId = (CommPortIdentifier) portEnum.nextElement();
                String name = currPortId.getName();
                comboBoxComUpPort.addItem(name);
            }

            comboBoxComUpPort.setSelectedItem(selectedPort);
        }
    }//GEN-LAST:event_updateUpPorts

    private void buttonComUpDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonComUpDisconnectActionPerformed
        try {
            mainSerialUp.close();

            buttonComUpConnect.setEnabled(true);
            buttonComUpDisconnect.setEnabled(false);
            comboBoxUpBaud.setEnabled(true);
            comboBoxComUpPort.setEnabled(true);
            comboBoxComUpDataBits.setEnabled(true);
            comboBoxComUpStopBits.setEnabled(true);
            comboBoxComUpParity.setEnabled(true);
        } catch (Exception ex) {
            System.out.println("\n" + ex.toString());
        }
    }//GEN-LAST:event_buttonComUpDisconnectActionPerformed

    private void buttonComUpConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonComUpConnectActionPerformed
        try {
            int dataBits, stopBits, parityBit;

            /* determine value for dataBits */
            if (comboBoxComUpDataBits.getSelectedItem().equals("Data Bits: 5")) {
                dataBits = SerialPort.DATABITS_5;
            } else if (comboBoxComUpDataBits.getSelectedItem().equals("Data Bits: 6")) {
                dataBits = SerialPort.DATABITS_6;
            } else if (comboBoxComUpDataBits.getSelectedItem().equals("Data Bits: 7")) {
                dataBits = SerialPort.DATABITS_7;
            } else {
                dataBits = SerialPort.DATABITS_8;
            }

            /* determine value for stopBits */
            if (comboBoxComUpStopBits.getSelectedItem().equals("Stop Bits: 1")) {
                stopBits = SerialPort.STOPBITS_1;
            } else if (comboBoxComUpStopBits.getSelectedItem().equals("Stop Bits: 1.5")) {
                stopBits = SerialPort.STOPBITS_1_5;
            } else {
                stopBits = SerialPort.STOPBITS_2;
            }

            /* determine value for parityBit */
            if (comboBoxComUpParity.getSelectedItem().equals("Parity: Odd")) {
                parityBit = SerialPort.PARITY_ODD;
            } else if (comboBoxComUpParity.getSelectedItem().equals("Parity: Even")) {
                parityBit = SerialPort.PARITY_EVEN;
            } else if (comboBoxComUpParity.getSelectedItem().equals("Parity: Space")) {
                parityBit = SerialPort.PARITY_SPACE;
            } else if (comboBoxComUpParity.getSelectedItem().equals("Parity: Mark")) {
                parityBit = SerialPort.PARITY_MARK;
            } else {
                parityBit = SerialPort.PARITY_NONE;
            }

            mainSerialUp = new SerialConnection(comboBoxComUpPort.getSelectedItem().toString(),
                    Integer.parseInt(comboBoxUpBaud.getSelectedItem().toString()),
                    dataBits, stopBits, parityBit);

            buttonComUpConnect.setEnabled(false);
            buttonComUpDisconnect.setEnabled(true);
            comboBoxUpBaud.setEnabled(false);
            comboBoxComUpPort.setEnabled(false);
            comboBoxComUpDataBits.setEnabled(false);
            comboBoxComUpStopBits.setEnabled(false);
            comboBoxComUpParity.setEnabled(false);

        } catch (Exception ex) {
            System.out.println("\n" + ex.toString());
        }
    }//GEN-LAST:event_buttonComUpConnectActionPerformed

    private void buttonTCPDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTCPDisconnectActionPerformed
        try {
            listenTCP = false;
            for (Thread t : TCPClientListernerThreads) {
                t.join(10);
            }

            if (clientSockets != null && clientSockets.size() > 0) {
                for (Socket s : clientSockets) {
                    try {
                        s.getOutputStream().write("%^".getBytes());
                        s.close();
                    } catch (Exception disConEx) {
                    }
                }
            }

            clientSockets = new ArrayList<Socket>();

            if (mainSocket != null) {
                mainSocket.close();
                mainSocket = null;
            }

            fieldClient.setText("0");

            buttonTCPConnect.setEnabled(true);
            buttonTCPDisconnect.setEnabled(false);
            fieldPort.setEnabled(true);
            fieldIP.setEnabled(true);
        } catch (Exception ex) {
            System.out.println("\nException in :\"buttonTCPDisconnectActionPerformed\"\n" + ex.toString());
        }
    }//GEN-LAST:event_buttonTCPDisconnectActionPerformed

    private void buttonTCPConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTCPConnectActionPerformed
        try {
            String ipStr = fieldIP.getText();
            String[] ipStrArray = ipStr.split("\\.");
            for (int i = 0; i < ip.length; i++) {
                ip[i] = (byte) Integer.parseInt(ipStrArray[i]);
            }

            int port = Integer.parseInt(fieldPort.getText());
            mainSocket = new ServerSocket(port, 1,
                    InetAddress.getByAddress(ip));

            fieldIP.setText(mainSocket.getInetAddress().toString().replace("/", ""));

            buttonTCPConnect.setEnabled(false);
            buttonTCPDisconnect.setEnabled(true);
            fieldPort.setEnabled(false);
            fieldIP.setEnabled(false);
            listenTCP = true;

            startListenerTCPThread();
        } catch (Exception ex) {
            System.out.println("\nException in :\"buttonTCPConnectActionPerformed\"\n" + ex.toString());
        }
    }//GEN-LAST:event_buttonTCPConnectActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        buttonTCPDisconnectActionPerformed(null);
        buttonComUpDisconnectActionPerformed(null);
        buttonComDownDisconnectActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void buttonComDownDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonComDownDisconnectActionPerformed
        try {
            listenSerial = false;
            listenThreadSerial.stop();

            mainSerialDown.close();

            buttonComDownConnect.setEnabled(true);
            buttonComDownDisconnect.setEnabled(false);
            comboBoxDownBaud.setEnabled(true);
            comboBoxComDownPort.setEnabled(true);
            comboBoxComDownDataBits.setEnabled(true);
            comboBoxComDownStopBits.setEnabled(true);
            comboBoxComDownParity.setEnabled(true);
        } catch (Exception ex) {
            System.out.println("\n" + ex.toString());
        }
    }//GEN-LAST:event_buttonComDownDisconnectActionPerformed

    private void buttonComDownConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonComDownConnectActionPerformed
        try {
            int dataBits, stopBits, parityBit;

            /* determine value for dataBits */
            if (comboBoxComDownDataBits.getSelectedItem().equals("Data Bits: 5")) {
                dataBits = SerialPort.DATABITS_5;
            } else if (comboBoxComDownDataBits.getSelectedItem().equals("Data Bits: 6")) {
                dataBits = SerialPort.DATABITS_6;
            } else if (comboBoxComDownDataBits.getSelectedItem().equals("Data Bits: 7")) {
                dataBits = SerialPort.DATABITS_7;
            } else {
                dataBits = SerialPort.DATABITS_8;
            }

            /* determine value for stopBits */
            if (comboBoxComDownStopBits.getSelectedItem().equals("Stop Bits: 1")) {
                stopBits = SerialPort.STOPBITS_1;
            } else if (comboBoxComDownStopBits.getSelectedItem().equals("Stop Bits: 1.5")) {
                stopBits = SerialPort.STOPBITS_1_5;
            } else {
                stopBits = SerialPort.STOPBITS_2;
            }

            /* determine value for parityBit */
            if (comboBoxComDownParity.getSelectedItem().equals("Parity: Odd")) {
                parityBit = SerialPort.PARITY_ODD;
            } else if (comboBoxComDownParity.getSelectedItem().equals("Parity: Even")) {
                parityBit = SerialPort.PARITY_EVEN;
            } else if (comboBoxComDownParity.getSelectedItem().equals("Parity: Space")) {
                parityBit = SerialPort.PARITY_SPACE;
            } else if (comboBoxComDownParity.getSelectedItem().equals("Parity: Mark")) {
                parityBit = SerialPort.PARITY_MARK;
            } else {
                parityBit = SerialPort.PARITY_NONE;
            }

            mainSerialDown = new SerialConnection(comboBoxComDownPort.getSelectedItem().toString(),
                    Integer.parseInt(comboBoxDownBaud.getSelectedItem().toString()),
                    dataBits, stopBits, parityBit);

            listenSerial = true;
            startListenerSerialThread();

            buttonComDownConnect.setEnabled(false);
            buttonComDownDisconnect.setEnabled(true);
            comboBoxDownBaud.setEnabled(false);
            comboBoxComDownPort.setEnabled(false);
            comboBoxComDownDataBits.setEnabled(false);
            comboBoxComDownStopBits.setEnabled(false);
            comboBoxComDownParity.setEnabled(false);

        } catch (Exception ex) {
            System.out.println("\n" + ex.toString());
        }
    }//GEN-LAST:event_buttonComDownConnectActionPerformed

    private void updateDownPort(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateDownPort
        if (comboBoxComDownPort.isEnabled()) {
            Object selectedPort = comboBoxComDownPort.getSelectedItem();
            comboBoxComDownPort.removeAllItems();

            Enumeration portEnum = CommPortIdentifier.getPortIdentifiers();

            //System.out.println("In updateDownPorts()");
            while (portEnum.hasMoreElements()) {
                CommPortIdentifier currPortId = (CommPortIdentifier) portEnum.nextElement();
                String name = currPortId.getName();
                //System.out.println(name);
                comboBoxComDownPort.addItem(name);
            }

            comboBoxComDownPort.setSelectedItem(selectedPort);
        }
    }//GEN-LAST:event_updateDownPort

    private void fieldIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldIPActionPerformed

    private void comboBoxComUpPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxComUpPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxComUpPortActionPerformed

    private void comboBoxComDownPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxComDownPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxComDownPortActionPerformed

    private void fieldPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldPortActionPerformed

    private void buttonUDPconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUDPconnectActionPerformed
        try {
            UDPipString = UDPip.getText();
            String[] ipStrArray = UDPipString.split("\\.");
            for (int i = 0; i < udpAddress.length; i++) {
                udpAddress[i] = (byte) Integer.parseInt(ipStrArray[i]);
            }

            int port = Integer.parseInt(UDPPort.getText());
            UDPsocket = new DatagramSocket(8191,
                    InetAddress.getByAddress(udpAddress));

        } catch (UnknownHostException ex) {
            Logger.getLogger(MosesServerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SocketException Socketexception) {
            System.err.println("Error creating or accessing the socket. Check connection.");
        }
        
//            String UDPipString = UDPip.getText();
//            int UDPPortint = Integer.parseInt(UDPipString);
//        try {
//            UDPsocket = new DatagramSocket(UDPPortint);
//        } catch (SocketException ex) {
//            Logger.getLogger(MosesServerForm.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        try {
//            DatagramSocket socket = new DatagramSocket(UDPPortint, InetAddress.getByName(UDPipString));
//        } catch (SocketException | UnknownHostException ex) {
//            Logger.getLogger(MosesServerForm.class.getName()).log(Level.SEVERE, null, ex);
//        }

        buttonUDPdisconnect.setEnabled(true);
        UDPip.setEnabled(false);
        UDPPort.setEnabled(false);
        comboBoxComUpPort.setEnabled(false);
        comboBoxComUpDataBits.setEnabled(false);
        comboBoxUpBaud.setEnabled(false);
        comboBoxComUpStopBits.setEnabled(false);
        buttonComUpConnect.setEnabled(false);
        comboBoxComUpParity.setEnabled(false);
        buttonComUpDisconnect.setEnabled(false);

    }//GEN-LAST:event_buttonUDPconnectActionPerformed

    private void UDPipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UDPipActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UDPipActionPerformed

    private void buttonUDPdisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUDPdisconnectActionPerformed
        buttonUDPconnect.setEnabled(true);
        buttonUDPdisconnect.setEnabled(false);
        UDPip.setEnabled(true);
        UDPPort.setEnabled(true);

        comboBoxComUpPort.setEnabled(true);
        comboBoxComUpDataBits.setEnabled(true);
        comboBoxUpBaud.setEnabled(true);
        comboBoxComUpStopBits.setEnabled(true);
        buttonComUpConnect.setEnabled(true);
        comboBoxComUpParity.setEnabled(true);
        buttonComUpDisconnect.setEnabled(true);

    }//GEN-LAST:event_buttonUDPdisconnectActionPerformed

    private void startListenerTCPThread() {
        clientListenerTCP = new Thread(new Runnable() {
            public void run() {
                clientListenerTCP();
            }
        });
        clientListenerTCP.start();

        listenThreadTCP = new Thread(new Runnable() {
            public void run() {
                listenerTCP();
            }
        });
        listenThreadTCP.start();
    }

    private void clientListenerTCP() {
        while (listenTCP) {
            try {
                Socket temp = mainSocket.accept();
                System.out.println("\nClient Connected: " + temp.getInetAddress().toString());

                clientSockets.add(temp);
                fieldClient.setText(Integer.toString(clientSockets.size()));

            } catch (Exception ex) {
                System.err.println("\n" + ex.toString());
            }
        }
    }

    private void listenerTCP() {
        ArrayList<Socket> socksToRemove = new ArrayList<Socket>();

        while (listenTCP) {
            do {
                try {
                    Thread.currentThread().sleep(100);
                } catch (InterruptedException ex) {
                }
            } while (clientSockets.isEmpty());

            try {
                for (Socket sock : clientSockets) {
                    String buffer = "";
                    char newChar = ' ';
                    int testInt;
                    Boolean inPacket = false;

                    InputStream in = sock.getInputStream();


                    /* if this socket is connected and has data ready */
                    if (sock.isConnected()) {
                        /* while there is more data to get */
                        while (in.available() > 0) {
                            //newChar = (char)in.read();
                            testInt = in.read();
                            newChar = (char) testInt;

                            /* if not in a packet, but the new char is the start delimiter */
                            if (!inPacket & (decode(newChar) == charstart[0])) {
                                inPacket = true;
                                buffer = Character.toString(newChar);
                            } /* if in packet and new char is not stop delimiter */ else if (inPacket & (decode(newChar) != charstop[0])) {
                                buffer += Character.toString(newChar);
                            } /* if in packet and new char is the stop delimiter */ else if (inPacket & (decode(newChar) == charstop[0])) {
                                inPacket = false;
                                buffer += Character.toString(newChar);

                                /* if packet is empty, end this socket */
                                if (buffer.equals("%^")) {
                                    socksToRemove.add(sock);
                                } else {
                                    /* log packet */
                                    logger.Write(buffer, "tx.log");

                                    System.out.println(buffer);

                                    /* Send out packet over Com */
                                    writeCom(buffer);

                                    /* let other clients know message was sent to F/C */
                                    echoBack(buffer, sock);

                                    /* clear buffer */
                                    buffer = "";
                                }
                            }
                        }
                    }
                }

                /* remove the bad sockets */
                for (Socket sock : socksToRemove) {
                    System.out.println("Client disconnected: " + sock.getInetAddress().toString());
                    try {
                        sock.close();
                    } catch (Exception ex) {
                    }

                    clientSockets.remove(sock);
                    fieldClient.setText(Integer.toString(clientSockets.size()));
                }

                /* clear the array of bad socks */
                socksToRemove = new ArrayList<Socket>();
            } catch (Exception ex) {
                System.err.println("\nException in: \"istenerTCP()\"");
                System.err.println(ex.toString());
            }
        }
    }

    private void echoBack(String buffer, Socket origin) {
        /* mask buffer to 7 bits */
        String maskedBuffer = "";
        for (int i = 0; i < buffer.length(); i++) {
            maskedBuffer += (char) (0x7F & (int) buffer.charAt(i));
        }

        for (Socket s : clientSockets) {
            try {
                if (s == null || s.isClosed()) {
                    /* clear out clients that terminated w/o sending a "%^" packet */
                    clientSockets.remove(s);
                    fieldClient.setText(Integer.toString(clientSockets.size()));
                    System.out.println("\nClient Removed: " + s.getInetAddress().toString());

                } else if (!s.equals(origin)) {
                    /* Extra "%" indicates to clients that this is a command for the F/C */
                    s.getOutputStream().write(("%" + maskedBuffer).getBytes());
                }
            } catch (Exception ex) {
                System.err.println("\nException in: \"echoBack(String buffer, Socket origin)\"");
                System.err.println(ex.toString());

                clientSockets.remove(s);

                fieldClient.setText(Integer.toString(clientSockets.size()));
                System.out.println("\nClient Removed: " + s.getInetAddress().toString());

            }
        }
    }

    private void writeCom(String data) {
        try {
            if (mainSerialUp != null) {
                /* Write packet object's bytes to TCP/IP output buffer */
                data += (char) 0x04;
                System.out.println(data.length());
                byte[] dataBytes = data.getBytes(ISO_8859_1);
                mainSerialUp.write(dataBytes);

                /* Write packet's masked string to 'Sent Packets' text area */
                String maskedData = "";
                for (int i = 0; i < data.length(); i++) {
                    maskedData += (char) (0x7F & data.charAt(i));
                }

                textAreaSent.append((new Date()).toLocaleString() + ":\n"
                        + maskedData + "\n");
                textAreaSent.setCaretPosition(textAreaSent.getDocument().getLength());

                System.out.println("\nSent Packet: " + data);
            } else if (UDPsocket != null) {
                
                // Write data to UDP Port
                data += (char) 0x04;
                System.out.println(data.length());
                byte[] dataBytes = data.getBytes(ISO_8859_1);
                String UDPipString = UDPip.getText();
                String UDPPortString = UDPPort.getText();
                int UDPPortint = Integer.parseInt(UDPPortString);
                DatagramPacket bytes = new DatagramPacket(dataBytes, dataBytes.length, InetAddress.getByName(UDPipString), UDPPortint);
                UDPsocket.send(bytes);

                /* Write packet's masked string to 'Sent Packets' text area */
                String maskedData = "";
                for (int i = 0; i < data.length(); i++) {
                    maskedData += (char) (0x7F & data.charAt(i));
                }

                textAreaSent.append((new Date()).toLocaleString() + ":\n"
                        + maskedData + "\n");
                textAreaSent.setCaretPosition(textAreaSent.getDocument().getLength());
                
            } else {
                System.err.println("\nCan't send packet over Com, no active connection!");
            }

        } catch (IOException ex) {
            System.err.println("\nIOException in: \"writeCom(String data)\"");
            System.err.println("Can't send packet, IO Exception!");
        }
    }

    private void startListenerSerialThread() {
        listenThreadSerial = new Thread(new Runnable() {
            public void run() {
                listenerSerial();
            }
        });
        listenThreadSerial.start();
    }

    private void listenerSerial() {
        try {
            String buffer = "";
            char newChar;
            Boolean inPacket = false;

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(mainSerialDown.getInputStream(), ISO_8859_1));

            while (listenSerial) {
                /* Wait for data */
                while (!in.ready()) {
                    try {
                        Thread.sleep(1);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MosesServerForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                int newInt = in.read();
                newChar = (char) newInt;
                char decodedChar = decode(newChar);

                /* if not in a packet, but the new char is the start delimiter */
                if (!inPacket & (decode(newChar) == charstart[0])) {
                    inPacket = true;
                    buffer = Character.toString(newChar);
                } /* if in packet and new char is not stop delimiter */ else if (inPacket & (decode(newChar) != charstop[0])) {
                    buffer += Character.toString(newChar);
                } /* if in packet and new char is the stop delimiter */ else if (inPacket & (decode(newChar) == charstop[0])) {
                    inPacket = false;
                    buffer += Character.toString(newChar);

                    /* log packet  */
                    logger.Write(buffer, "rx.log");

                    /* send packet  */
                    writeTCP(buffer);

                    /* clear buffer */
                    buffer = "";
                }
            }

        } catch (IOException ex) {
            System.err.println("\nException in: \"listenerSerial()\"");
            System.err.println("Couldn't Recieve Data:\n" + ex.toString());
        }
    }

    private void writeTCP(String data) {
        /* Mask the packet */
        String maskedData = "";
        for (int i = 0; i < data.length(); i++) {
            maskedData += (char) (decode(data.charAt(i)));
        }

        /* write the packet to the 'recieved packets text area */
        textAreaRecieved.append((new Date()).toLocaleString() + ":\n"
                + maskedData + "\n");
        textAreaRecieved.setCaretPosition(textAreaRecieved.getDocument().getLength());

        if (clientSockets != null && clientSockets.size() > 0) {
            System.out.println("\nReceived Packet: " + data);

            /* for each socket */
            for (Socket sock : clientSockets) {
                try {
                    /* write the masked packet to the socket */
                    sock.getOutputStream().write(maskedData.getBytes(ISO_8859_1));
                } catch (Exception ex) {
                    System.err.println("\nException in: \"writeTCP()\"");
                    System.err.println(ex.toString());
                }
            }
        } else {
            System.err.println("\nCan't send packet over TCP, no active connection!");
        }
    }

    private char decode(char dataByte) {
        return (char) (0x7F & dataByte);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MosesServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MosesServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MosesServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MosesServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        System.out.println("*****************************");
        System.out.println("* Moses Server GSE Software *");
        System.out.println("* Matthew Handley, SSEL     *");
        System.out.println("* Febuarary 2013            *");
        System.out.println("*****************************\n\n");

        try {
            String laf = UIManager.getSystemLookAndFeelClassName();
            UIManager.setLookAndFeel(laf);
        } catch (Exception ex) {
            System.out.println("\n" + ex.toString());
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MosesServerForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField UDPPort;
    private javax.swing.JTextField UDPip;
    private javax.swing.JButton buttonComDownConnect;
    private javax.swing.JButton buttonComDownDisconnect;
    private javax.swing.JButton buttonComUpConnect;
    private javax.swing.JButton buttonComUpDisconnect;
    private javax.swing.JButton buttonTCPConnect;
    private javax.swing.JButton buttonTCPDisconnect;
    private javax.swing.JButton buttonUDPconnect;
    private javax.swing.JButton buttonUDPdisconnect;
    private javax.swing.JComboBox comboBoxComDownDataBits;
    private javax.swing.JComboBox comboBoxComDownParity;
    private javax.swing.JComboBox comboBoxComDownPort;
    private javax.swing.JComboBox comboBoxComDownStopBits;
    private javax.swing.JComboBox comboBoxComUpDataBits;
    private javax.swing.JComboBox comboBoxComUpParity;
    private javax.swing.JComboBox comboBoxComUpPort;
    private javax.swing.JComboBox comboBoxComUpStopBits;
    private javax.swing.JComboBox comboBoxDownBaud;
    private javax.swing.JComboBox comboBoxUpBaud;
    private javax.swing.JTextField fieldClient;
    private javax.swing.JTextField fieldIP;
    private javax.swing.JTextField fieldPort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea textAreaRecieved;
    private javax.swing.JTextArea textAreaSent;
    // End of variables declaration//GEN-END:variables
}
